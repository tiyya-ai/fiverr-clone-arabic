// Prisma schema for live database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql" or "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  fullName            String
  username            String   @unique
  avatar              String?
  phone               String?
  location            String
  bio                 String?
  skills              String[]
  languages           String[]
  rating              Float    @default(0)
  totalReviews        Int      @default(0)
  totalSales          Int      @default(0)
  responseTime        String   @default("1 hour")
  memberSince         String
  isVerified          Boolean  @default(false)
  userType            UserType @default(BUYER)
  verificationBadges  String[]
  verificationScore   Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  services            Service[]
  buyerOrders         Order[]   @relation("BuyerOrders")
  sellerOrders        Order[]   @relation("SellerOrders")
  reviews             Review[]
  
  @@map("users")
}

  model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  nameEn        String
  description   String
  descriptionEn String
  icon          String
  image         String?
  color         String    @default("#16a34a")
  isActive      Boolean   @default(true)
  serviceCount  Int       @default(0)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  services      Service[]
  
  @@map("categories")
}

model Service {
  id           String    @id @default(cuid())
  title        String
  titleEn      String
  description  String
  descriptionEn String
  categoryId   String
  userId       String
  images       String[]
  tags         String[]
  rating       Float     @default(0)
  totalReviews Int       @default(0)
  totalSales   Int       @default(0)
  isActive     Boolean   @default(true)
  isFeatured   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  category     Category  @relation(fields: [categoryId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  packages     ServicePackage[]
  orders       Order[]
  reviews      Review[]
  
  @@map("services")
}

model ServicePackage {
  id            String      @id @default(cuid())
  serviceId     String
  name          String
  nameEn        String
  description   String
  descriptionEn String
  price         Float
  deliveryTime  Int         // in days
  revisions     Int
  features      String[]
  type          PackageType
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  service       Service     @relation(fields: [serviceId], references: [id])
  orders        Order[]
  
  @@map("service_packages")
}

model Order {
  id           String      @id @default(cuid())
  serviceId    String
  packageId    String
  buyerId      String
  sellerId     String
  status       OrderStatus @default(PENDING)
  totalAmount  Float
  requirements String?
  deliveryDate DateTime
  completedAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  service      Service        @relation(fields: [serviceId], references: [id])
  package      ServicePackage @relation(fields: [packageId], references: [id])
  buyer        User           @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller       User           @relation("SellerOrders", fields: [sellerId], references: [id])
  
  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  serviceId String
  userId    String
  orderId   String?
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

// Enums
enum UserType {
  BUYER
  SELLER
  ADMIN
}

enum PackageType {
  basic
  standard
  premium
}

enum OrderStatus {
  PENDING
  ACTIVE
  DELIVERED
  COMPLETED
  CANCELLED
  DISPUTED
}