generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  fullName    String
  avatar      String?
  bio         String?
  country     String?
  languages   String?
  skills      String?
  userType    String @default("BUYER")
  isVerified  Boolean  @default(false)
  rating      Float    @default(0)
  totalReviews Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  gigs        Gig[]
  orders      Order[]
  reviews     Review[]
  messages    Message[]
  wallet      Wallet?

  @@map("users")
}

model Gig {
  id          String      @id @default(cuid())
  title       String
  description String
  category    String
  subcategory String?
  tags        String?
  images      String?
  packages    Package[]
  userId      String
  isActive    Boolean     @default(true)
  rating      Float       @default(0)
  totalReviews Int        @default(0)
  totalSales  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]
  reviews     Review[]

  @@map("gigs")
}

model Package {
  id          String  @id @default(cuid())
  gigId       String
  type        String
  title       String
  description String
  price       Float
  deliveryTime Int
  revisions   Int
  features    String?

  gig         Gig     @relation(fields: [gigId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@map("packages")
}

model Order {
  id          String      @id @default(cuid())
  gigId       String
  packageId   String
  buyerId     String
  sellerId    String
  status      String @default("PENDING")
  totalAmount Float
  requirements String?
  deliverables String?
  dueDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  gig         Gig         @relation(fields: [gigId], references: [id])
  package     Package     @relation(fields: [packageId], references: [id])
  buyer       User        @relation(fields: [buyerId], references: [id])
  review      Review?
  messages    Message[]

  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  orderId   String   @unique
  gigId     String
  reviewerId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  gig       Gig      @relation(fields: [gigId], references: [id])
  reviewer  User     @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

model Message {
  id        String   @id @default(cuid())
  orderId   String?
  senderId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  order     Order?   @relation(fields: [orderId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Wallet {
  id            String @id @default(cuid())
  userId        String @unique
  balance       Float  @default(0)
  pendingAmount Float  @default(0)
  totalEarnings Float  @default(0)

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

