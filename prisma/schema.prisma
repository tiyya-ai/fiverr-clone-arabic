// Prisma schema for live database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(cuid())
  email               String   @unique
  password            String
  fullName            String
  username            String   @unique
  avatar              String?
  phone               String?
  location            String
  bio                 String?
  skills              String   @default("[]")
  languages           String   @default("[]")
  rating              Float    @default(0)
  totalReviews        Int      @default(0)
  totalSales          Int      @default(0)
  responseTime        String   @default("1 hour")
  memberSince         String
  isVerified          Boolean  @default(false)
  isOnline            Boolean  @default(false)
  lastSeen            DateTime?
  userType            String   @default("BUYER")
  verificationBadges  String   @default("[]")
  verificationScore   Int?
  emailVerified       Boolean  @default(false)
  phoneVerified       Boolean  @default(false)
  level               String   @default("مبتدئ")
  completedTasks      Int      @default(0)
  stripeCustomerId    String?
  stripeAccountId     String?
  stripeOnboardingComplete Boolean @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  services            Service[]
  buyerOrders         Order[]   @relation("BuyerOrders")
  sellerOrders        Order[]   @relation("SellerOrders")
  reviews             Review[]
  sentMessages        Message[] @relation("SentMessages")
  receivedMessages    Message[] @relation("ReceivedMessages")
  portfolioItems      PortfolioItem[]
  certifications      Certification[]
  workHistory         WorkHistoryItem[]
  
  @@map("users")
}

  model Category {
  id            String    @id @default(cuid())
  name          String    @unique
  nameEn        String
  description   String
  descriptionEn String
  icon          String
  image         String?
  color         String    @default("#16a34a")
  isActive      Boolean   @default(true)
  serviceCount  Int       @default(0)
  order         Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  services      Service[]
  
  @@map("categories")
}

model Service {
  id           String    @id @default(cuid())
  title        String
  titleEn      String
  description  String
  descriptionEn String
  categoryId   String
  userId       String
  images       String   @default("[]")
  tags         String   @default("[]")
  rating       Float     @default(0)
  totalReviews Int       @default(0)
  totalSales   Int       @default(0)
  isActive     Boolean   @default(true)
  isFeatured   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  category     Category  @relation(fields: [categoryId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  packages     ServicePackage[]
  orders       Order[]
  reviews      Review[]
  faqs         ServiceFAQ[]
  
  @@map("services")
}

model ServicePackage {
  id            String      @id @default(cuid())
  serviceId     String
  name          String
  nameEn        String
  description   String
  descriptionEn String
  price         Float
  deliveryTime  Int         // in days
  revisions     Int
  features      String   @default("[]")
  type          String   @default("basic")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  service       Service     @relation(fields: [serviceId], references: [id])
  orders        Order[]
  
  @@map("service_packages")
}

model Order {
  id              String      @id @default(cuid())
  serviceId       String
  packageId       String
  buyerId         String
  sellerId        String
  status          String      @default("PENDING")
  totalAmount     Float
  paymentIntentId String?
  requirements    String?
  notes           String?
  urgentDelivery  Boolean  @default(false)
  deliveryDate    DateTime
  completedAt     DateTime?
  paidAt          DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  service      Service        @relation(fields: [serviceId], references: [id])
  package      ServicePackage @relation(fields: [packageId], references: [id])
  buyer        User           @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller       User           @relation("SellerOrders", fields: [sellerId], references: [id])
  messages     Message[]
  
  @@map("orders")
}

model Review {
  id        String   @id @default(cuid())
  serviceId String
  userId    String
  orderId   String?
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

// Note: SQLite doesn't support enums, using String fields instead
// UserType: BUYER, SELLER, ADMIN
// PackageType: basic, standard, premium  
// OrderStatus: PENDING, ACTIVE, DELIVERED, COMPLETED, CANCELLED, DISPUTED

model Message {
  id        String   @id @default(cuid())
  content   String
  isRead    Boolean  @default(false)
  orderId   String?
  createdAt DateTime @default(now())

  // Relations
  fromUserId String
  fromUser   User   @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String
  toUser     User   @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
  order      Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model PortfolioItem {
  id           String   @id @default(cuid())
  title        String
  description  String
  images       String   @default("[]")
  technologies String   @default("[]")
  projectUrl   String?
  completedAt  DateTime
  createdAt    DateTime @default(now())

  // Relations
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model Certification {
  id            String    @id @default(cuid())
  name          String
  issuer        String
  issueDate     DateTime
  expiryDate    DateTime?
  credentialUrl String?
  createdAt     DateTime  @default(now())

  // Relations
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model WorkHistoryItem {
  id           String   @id @default(cuid())
  title        String
  company      String
  duration     String
  description  String
  technologies String   @default("[]")
  createdAt    DateTime @default(now())

  // Relations
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("work_history")
}

model ServiceFAQ {
  id        String @id @default(cuid())
  question  String
  answer    String
  order     Int    @default(0)

  // Relations
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_faqs")
}